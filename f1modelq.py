# -*- coding: utf-8 -*-
"""F1ModelQ

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HszEoPoxQMWF60RuPqybQCJgPVkAsZD8
"""

import pandas as pd
import numpy as np
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error

df = pd.read_csv('C:/Users/sairi/OneDrive/Desktop/Apps/F1 Prediction Page/f1prediction/cleanedData2.csv')

# --- feature sets ---
WITH_QUALI = [
    "grid","quali_best_s_filled",
    "momentum_3","momentum_5","momentum_10",
    "driverErrorRate","driverScore",
    "constructor_avg_pos","constructor_momentum",
    "driver_circuit_avg","constructor_circuit_avg",
    "driverRef","constructorId_x","circuitId"
]

WITHOUT_QUALI = [
    "momentum_3","momentum_5","momentum_10",
    "driverErrorRate","driverScore",
    "constructor_avg_pos","constructor_momentum",
    "driver_circuit_avg","constructor_circuit_avg",
    "driverRef","constructorId_x","circuitId"
]

lineup = [
    {"driverRef": "verstappen", "constructorRef": "red_bull"},
    {"driverRef": "tsunoda",      "constructorRef": "red_bull"},
    {"driverRef": "leclerc",    "constructorRef": "ferrari"},
    {"driverRef": "hamilton",      "constructorRef": "ferrari"},
    {"driverRef": "norris",     "constructorRef": "mclaren"},
    {"driverRef": "piastri",    "constructorRef": "mclaren"},
    {"driverRef": "antonelli",   "constructorRef": "mercedes"},
    {"driverRef": "russell",    "constructorRef": "mercedes"},
    {"driverRef": "alonso",     "constructorRef": "aston_martin"},
    {"driverRef": "stroll",     "constructorRef": "aston_martin"},
    {"driverRef": "colapinto",       "constructorRef": "alpine"},
    {"driverRef": "gasly",      "constructorRef": "alpine"},
    {"driverRef": "albon",      "constructorRef": "williams"},
    {"driverRef": "sainz",   "constructorRef": "williams"},
    {"driverRef": "hulkenberg",  "constructorRef": "sauber"},      # formerly Alfa Romeo → Stake F1
    {"driverRef": "bortoleto",   "constructorRef": "sauber"},
    {"driverRef": "hadjar",    "constructorRef": "rb"},         # formerly AlphaTauri → RB
    {"driverRef": "lawson",  "constructorRef": "rb"},
    {"driverRef": "ocon", "constructorRef": "haas"},
    {"driverRef": "bearman", "constructorRef": "haas"}
]

quali_dict = {
    "verstappen": {"grid": 1, "quali_best_s_filled": 78.792},
    "norris":     {"grid": 2, "quali_best_s_filled": 78.869},
    "piastri":    {"grid": 3, "quali_best_s_filled": 78.982},
    "leclerc":    {"grid": 4, "quali_best_s_filled": 79.007},
    "hamilton":   {"grid": 5, "quali_best_s_filled": 79.124},
    "russell":    {"grid": 6, "quali_best_s_filled": 79.157},
    "antonelli":  {"grid": 7, "quali_best_s_filled": 79.200},
    "bortoleto":  {"grid": 8, "quali_best_s_filled": 79.390},
    "alonso":     {"grid": 9, "quali_best_s_filled": 79.424},
    "tsunoda":    {"grid": 10, "quali_best_s_filled": 79.519},
    "bearman":    {"grid": 11, "quali_best_s_filled": 79.446},
    "hulkenberg": {"grid": 12, "quali_best_s_filled": 79.498},
    "sainz":      {"grid": 13, "quali_best_s_filled": 79.528},
    "albon":      {"grid": 14, "quali_best_s_filled": 79.583},
    "ocon":       {"grid": 15, "quali_best_s_filled": 79.707},
    "hadjar":     {"grid": 16, "quali_best_s_filled": 79.917},
    "stroll":     {"grid": 17, "quali_best_s_filled": 79.948},
    "colapinto":  {"grid": 18, "quali_best_s_filled": 79.992},
    "gasly":      {"grid": 19, "quali_best_s_filled": 80.103},
    "lawson":     {"grid": 20, "quali_best_s_filled": 80.279},
}

# function to create the two models with quali data and without quali data
cutoff = 7

def train2Model(df):
    y = df["positionOrder"]

    Xq = pd.get_dummies(df[WITH_QUALI], columns=["driverRef","constructorId_x","circuitId"], drop_first=True) 

    train_idx = df[(df["year"] == 2025) & (df["round"] <= cutoff)].index

    modelQ = XGBRegressor(n_estimators=500, learning_rate=0.01, random_state=42)
    modelQ.fit(Xq.loc[train_idx], y.loc[train_idx])


    return {
        "with_quali": {"model": modelQ, "columns": Xq.columns},
    }

artifacts = train2Model(df)

def build_snapshot_for_lineup(df, lineup, upcoming_year, upcoming_round, upcoming_circuitId):
    lineup_df = pd.DataFrame(lineup)

    # Historical strictly before this GP
    hist = df[(df["year"] < upcoming_year) |
              ((df["year"] == upcoming_year) & (df["round"] < upcoming_round))]

    # Last known row per driver
    last_idx = hist.groupby("driverRef")["raceId"].idxmax()
    last = hist.loc[last_idx].copy()

    # Merge lineup onto last known state
    snap = lineup_df.merge(last, on="driverRef", how="left", suffixes=("","_hist"))

    # Overwrite context
    snap["year"] = upcoming_year
    snap["round"] = upcoming_round
    snap["circuitId"] = upcoming_circuitId

    # If you use constructorId_x in training, enforce it here
    if "constructorId_x" not in snap.columns:
        snap["constructorId_x"] = snap["constructorRef"]

    # … then continue with the fill logic (grid, quali_best_s_filled, features etc.)
    return snap

def predict_pre_quali(snapshot_df, artifacts):
    use = snapshot_df[[c for c in WITHOUT_QUALI if c in snapshot_df.columns]]
    X = pd.get_dummies(use, columns=["driverRef","constructorId_x","circuitId"], drop_first=True)
    X = X.reindex(columns=artifacts["with_quali"]["columns"], fill_value=0)
    preds = artifacts["with_quali"]["model"].predict(X)
    out = snapshot_df[["driverRef"]].copy()
    out["predicted_position"] = preds
    out = out.sort_values("predicted_position").reset_index(drop=True)
    out["proj_rank"] = out.index + 1
    return out

def predict_post_quali(snapshot_df, artifacts, quali_dict):
    dfq = snapshot_df.copy()
    def qget(d, k): return (quali_dict.get(d, {}) or {}).get(k, np.nan)
    dfq["grid"] = dfq["driverRef"].map(lambda d: qget(d, "grid"))
    if "quali_best_s_filled" in dfq.columns:
        dfq["quali_best_s_filled"] = dfq["driverRef"].map(lambda d: qget(d, "quali_best_s_filled"))
    if dfq["quali_best_s_filled"].isna().any():
        worst = dfq["quali_best_s_filled"].max(skipna=True)
        dfq["quali_best_s_filled"] = dfq["quali_best_s_filled"].fillna((worst + 10.0) if pd.notna(worst) else 100.0)
    if dfq["grid"].isna().any():
        dfq["grid"] = dfq["grid"].fillna(10)

    use = dfq[[c for c in WITH_QUALI if c in dfq.columns]]
    X = pd.get_dummies(use, columns=["driverRef","constructorId_x","circuitId"], drop_first=True)
    X = X.reindex(columns=artifacts["with_quali"]["columns"], fill_value=0)
    preds = artifacts["with_quali"]["model"].predict(X)
    out = dfq[["driverRef","grid"]].copy()
    out["predicted_position"] = preds
    out = out.sort_values("predicted_position").reset_index(drop=True)
    out["proj_rank"] = out.index + 1
    return out

UPCOMING_YEAR, UPCOMING_ROUND, UPCOMING_CID = 2025, 16, 14  # example

# --- Load artifacts ---
try:
    artifacts = joblib.load("artifacts.pkl")
    print("✅ Loaded saved artifacts from artifacts.pkl")
except FileNotFoundError:
    print("⚠️ No artifacts.pkl found. Run `python f1modelq.py` to train first.")
    artifacts = None

# --- Only run training + demo if script is executed directly ---
if __name__ == "__main__":
    print("🔄 Training model...")
    artifacts = train2Model(df)
    joblib.dump(artifacts, "artifacts.pkl")
    print("✅ Training complete. Artifacts saved to artifacts.pkl")

    # (Optional quick test run)
    snap = build_snapshot_for_lineup(df, lineup, 2025, 16, 14)
    pre = predict_post_quali(snap, artifacts, quali_dict)
    print(pre.head(20))



"""
snap = build_snapshot_for_lineup(
    df, lineup,
    upcoming_year=UPCOMING_YEAR,
    upcoming_round=UPCOMING_ROUND,
    upcoming_circuitId=UPCOMING_CID
)
"""
"""
# AFTER quali - running this model 
pre = predict_post_quali(df, artifacts, quali_dict)
print(pre.head(20))
"""

